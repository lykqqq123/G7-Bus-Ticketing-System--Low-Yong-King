package pkginterface;

import control.BusDetailsControl;
import control.BusScheduleControl;
import control.CustTypeControl;
import control.TransactionControl;
import domain.BusDetailsDomain;
import domain.BusScheduleDomain;
import domain.CustTypeDomain;
import domain.TransactionDetails;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

public class TicketTransaction extends javax.swing.JFrame {

    /**
     * Creates new form PurchaseDetails
     */
    BusDetailsControl bdControl = new BusDetailsControl();
    BusScheduleControl bsControl = new BusScheduleControl();
    CustTypeControl ctControl = new CustTypeControl();
    TransactionControl tControl = new TransactionControl();
    Date today = new Date();
    SimpleDateFormat df = new SimpleDateFormat("d-M-yyyy");

    public TicketTransaction() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);

        ResultSet rs = null;

        //Get Depart Location from BusSchedule Database to DepartLocationCB
        rs = bsControl.retrieveRecord();

        DepartLocationCB.removeAllItems();
        try {
            while (rs.next()) {
                int verify = 0;
                //Get Date from database and convert to Date Type
                Date dateFromDatabase = null;
                dateFromDatabase = df.parse(rs.getString(2));
                if (dateFromDatabase.getDate() >= today.getDate() && dateFromDatabase.getMonth() >= today.getMonth() && dateFromDatabase.getYear() >= today.getYear()) {
                    for (int count = 0; count < DepartLocationCB.getItemCount(); count++) {
                        if (rs.getString(6).equals(DepartLocationCB.getItemAt(count))) {
                            verify = 1;
                        }
                    }
                } else {
                    verify = 1;
                }

                if (verify == 0) {
                    DepartLocationCB.addItem(rs.getString(6));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Add Customer Type into combo box
        rs = ctControl.retrieveRecord();
        try {
            while (rs.next()) {
                S1CB.addItem(rs.getString(2));
                S2CB.addItem(rs.getString(2));
                S3CB.addItem(rs.getString(2));
                S4CB.addItem(rs.getString(2));
                S5CB.addItem(rs.getString(2));
                S6CB.addItem(rs.getString(2));
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        SubmitBTN = new javax.swing.JButton();
        BackBTN = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        BusIDTF = new javax.swing.JTextField();
        BusTypeTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AvailableSeatTF = new javax.swing.JTextField();
        S4CB = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        S5CB = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        S6CB = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        S1CB = new javax.swing.JComboBox();
        S2CB = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        S3CB = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        SeatNeededCB = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        DepartLocationCB = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ArriveLocationCB = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        DepartDateCB = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        DepartTimeCB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Pristina", 3, 48)); // NOI18N
        Title.setText("Ticket Transaction");

        SubmitBTN.setText("Submit");
        SubmitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitBTNActionPerformed(evt);
            }
        });

        BackBTN.setText("Back");
        BackBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(634, Short.MAX_VALUE)
                .addComponent(SubmitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(BackBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel10.setText("Bus ID");

        jLabel13.setText("Bus Type");

        BusIDTF.setEditable(false);
        BusIDTF.setBackground(new java.awt.Color(204, 204, 204));

        BusTypeTF.setEditable(false);
        BusTypeTF.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Seat 4");

        jLabel6.setText("Available Seat");

        AvailableSeatTF.setEditable(false);
        AvailableSeatTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                AvailableSeatTFCaretUpdate(evt);
            }
        });

        S4CB.setEnabled(false);

        jLabel14.setText("Seat 5");

        S5CB.setEnabled(false);

        jLabel15.setText("Seat 6");

        S6CB.setEnabled(false);

        jLabel16.setText("Seat 1");

        S1CB.setEnabled(false);

        S2CB.setEnabled(false);

        jLabel17.setText("Seat 2");

        jLabel18.setText("Seat 3");

        S3CB.setEnabled(false);

        jLabel19.setText("Seat Needed");

        SeatNeededCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SeatNeededCBItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BusIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BusTypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(44, 974, Short.MAX_VALUE)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AvailableSeatTF, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(SeatNeededCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(S2CB, 0, 106, Short.MAX_VALUE)
                                    .addComponent(S1CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(S3CB, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(72, 72, 72)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(S4CB, 0, 93, Short.MAX_VALUE)
                                    .addComponent(S5CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(S6CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(58, Short.MAX_VALUE))
            .addComponent(jSeparator3)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BusIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BusTypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(S4CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addComponent(S5CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(59, 59, 59)
                                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(S6CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(AvailableSeatTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(36, 36, 36)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SeatNeededCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(131, 131, 131)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(67, 67, 67)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(S3CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(165, 165, 165)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(S1CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(194, 194, 194))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(S2CB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel2.setText("Departure Location");

        DepartLocationCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartLocationCBItemStateChanged(evt);
            }
        });

        jLabel3.setText("Arrival Location");

        ArriveLocationCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ArriveLocationCBItemStateChanged(evt);
            }
        });

        jLabel4.setText("Departure Date");

        DepartDateCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartDateCBItemStateChanged(evt);
            }
        });

        jLabel5.setText("Departure Time");

        DepartTimeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartTimeCBItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(334, 334, 334))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DepartLocationCB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArriveLocationCB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DepartDateCB, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DepartTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartLocationCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArriveLocationCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartDateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DepartLocationCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartLocationCBItemStateChanged
        ResultSet rs = null;
        rs = bsControl.retrieveRecord();
        ArriveLocationCB.removeAllItems();

        try {
            while (rs.next()) {
                //Get Date from database and convert to Date Type
                Date dateFromDatabase = null;
                dateFromDatabase = df.parse(rs.getString(2));

                if (dateFromDatabase.getDate() >= today.getDate() && dateFromDatabase.getMonth() >= today.getMonth() && dateFromDatabase.getYear() >= today.getYear()) {
                    if (rs.getString(6).equals(DepartLocationCB.getSelectedItem())) {
                        ArriveLocationCB.addItem(rs.getString(7));
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DepartLocationCBItemStateChanged

    private void ArriveLocationCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ArriveLocationCBItemStateChanged
        ResultSet rs = null;
        rs = bsControl.retrieveRecord();
        DepartDateCB.removeAllItems();
        try {
            while (rs.next()) {
                if (rs.getString(6).equals(DepartLocationCB.getSelectedItem()) && rs.getString(7).equals(ArriveLocationCB.getSelectedItem())) {
                    DepartDateCB.addItem(rs.getString(2));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ArriveLocationCBItemStateChanged

    private void DepartDateCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartDateCBItemStateChanged
        ResultSet rs = null;
        rs = bsControl.retrieveRecord();
        DepartTimeCB.removeAllItems();
        try {
            while (rs.next()) {
                if (rs.getString(6).equals(DepartLocationCB.getSelectedItem()) && rs.getString(7).equals(ArriveLocationCB.getSelectedItem()) && rs.getString(2).equals(DepartDateCB.getSelectedItem())) {
                    DepartTimeCB.addItem(rs.getString(3));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DepartDateCBItemStateChanged

    private void DepartTimeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartTimeCBItemStateChanged
        ResultSet rs = null;
        rs = bsControl.retrieveRecord();
        BusDetailsDomain bd = null;
        BusScheduleDomain bs = null;
        /*------------------------------------------------------------------------------------------------------------------------*/
        //For Bus ID and Bus Type
        BusIDTF.setText("");
        BusTypeTF.setText("");
        try {
            while (rs.next()) {
                if (rs.getString(2).equals(DepartDateCB.getSelectedItem()) && rs.getString(3).equals(DepartTimeCB.getSelectedItem()) && rs.getString(6).equals(DepartLocationCB.getSelectedItem()) && rs.getString(7).equals(ArriveLocationCB.getSelectedItem())) {
                    bd = bdControl.getRecord(rs.getString(8));
                    BusIDTF.setText(rs.getString(8));
                    BusTypeTF.setText(bd.getBusType());
                    AvailableSeatTF.setText(rs.getString(4));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*------------------------------------------------------------------------------------------------------------------------*/


    }//GEN-LAST:event_DepartTimeCBItemStateChanged

    private void AvailableSeatTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_AvailableSeatTFCaretUpdate
        SeatNeededCB.removeAllItems();
        int tempAS = 0;
        try {
            tempAS = Integer.parseInt(AvailableSeatTF.getText());
        } catch (NumberFormatException e) {

        }
        if (tempAS >= 6) {
            for (int i = 1; i <= 6; i++) {
                SeatNeededCB.addItem(i);
            }
        } else if (tempAS == 5) {
            for (int i = 1; i <= 5; i++) {
                SeatNeededCB.addItem(i);
            }
        } else if (tempAS == 4) {
            for (int i = 1; i <= 4; i++) {
                SeatNeededCB.addItem(i);
            }
        } else if (tempAS == 3) {
            for (int i = 1; i <= 3; i++) {
                SeatNeededCB.addItem(i);
            }
        } else if (tempAS == 2) {
            for (int i = 1; i <= 2; i++) {
                SeatNeededCB.addItem(i);
            }
        } else if (tempAS == 1) {
            for (int i = 1; i <= 1; i++) {
                SeatNeededCB.addItem(i);
            }
        } else {
            SeatNeededCB.addItem("Sold Out.");
        }
    }//GEN-LAST:event_AvailableSeatTFCaretUpdate

    private void SeatNeededCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SeatNeededCBItemStateChanged
        S1CB.setEnabled(false);
        S2CB.setEnabled(false);
        S3CB.setEnabled(false);
        S4CB.setEnabled(false);
        S5CB.setEnabled(false);
        S6CB.setEnabled(false);
        try {

            if (SeatNeededCB.getSelectedItem().equals(1)) {
                S1CB.setEnabled(true);
            } else if (SeatNeededCB.getSelectedItem().equals(2)) {
                S1CB.setEnabled(true);
                S2CB.setEnabled(true);
            } else if (SeatNeededCB.getSelectedItem().equals(3)) {
                S1CB.setEnabled(true);
                S2CB.setEnabled(true);
                S3CB.setEnabled(true);
            } else if (SeatNeededCB.getSelectedItem().equals(4)) {
                S1CB.setEnabled(true);
                S2CB.setEnabled(true);
                S3CB.setEnabled(true);
                S4CB.setEnabled(true);
            } else if (SeatNeededCB.getSelectedItem().equals(5)) {
                S1CB.setEnabled(true);
                S2CB.setEnabled(true);
                S3CB.setEnabled(true);
                S4CB.setEnabled(true);
                S5CB.setEnabled(true);
            } else if (SeatNeededCB.getSelectedItem().equals(6)) {
                S1CB.setEnabled(true);
                S2CB.setEnabled(true);
                S3CB.setEnabled(true);
                S4CB.setEnabled(true);
                S5CB.setEnabled(true);
                S6CB.setEnabled(true);
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_SeatNeededCBItemStateChanged

    private void BackBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBTNActionPerformed
        dispose();
        new MainMenu();
    }//GEN-LAST:event_BackBTNActionPerformed

    private void SubmitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitBTNActionPerformed
        TransactionDetails td = tControl.getLastRow();
        ResultSet rs = null;
        if (td != null) {
            rs = bsControl.retrieveRecord();
            BusScheduleDomain bs = null;
            try {
                while (rs.next()) {
                    if (rs.getString(6).equals(DepartLocationCB.getSelectedItem()) && rs.getString(7).equals(ArriveLocationCB.getSelectedItem()) && rs.getString(2).equals(DepartDateCB.getSelectedItem()) && rs.getString(3).equals(DepartTimeCB.getSelectedItem())) {
                        BusDetailsDomain bd = bdControl.getRecord(rs.getString(8));
                        bs = new BusScheduleDomain(rs.getString(1), rs.getString(2), rs.getString(3), Integer.parseInt(rs.getString(4)), Double.parseDouble(rs.getString(5)), rs.getString(6), rs.getString(7), bd);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (S1CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 1;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S1CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S1CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S2CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 2;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S2CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S2CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S3CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 3;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S3CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S3CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S4CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 4;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S4CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S4CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S5CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 5;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S5CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S5CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S6CB.isEnabled()) {
                int tempTranstID = Integer.parseInt(td.getTranstId());
                tempTranstID += 6;
                String tempStrTranstID = null;
                if (tempTranstID <= 9) {
                    tempStrTranstID = "0000" + tempTranstID;
                } else if (tempTranstID <= 99) {
                    tempStrTranstID = "000" + tempTranstID;
                } else if (tempTranstID <= 999) {
                    tempStrTranstID = "00" + tempTranstID;
                } else if (tempTranstID <= 9999) {
                    tempStrTranstID = "0" + tempTranstID;
                } else if (tempTranstID <= 99999) {
                    tempStrTranstID = "" + tempTranstID;
                }
                String tempType = null;
                if (S6CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S6CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            JOptionPane.showMessageDialog(rootPane, "Transaction Added.Please go to Payment Section to pay.");

            //Decrease the Available Seat
            int tempAS = Integer.parseInt(AvailableSeatTF.getText());
            int tempSN = SeatNeededCB.getSelectedIndex() + 1;
            int tempNewAS = tempAS - tempSN;
            bs.setAvailableSeat(tempNewAS);
            bsControl.updateRecord(bs);
            dispose();
            new Payment();
        } else {
            rs = bsControl.retrieveRecord();
            BusScheduleDomain bs = null;
            try {
                while (rs.next()) {
                    if (rs.getString(6).equals(DepartLocationCB.getSelectedItem()) && rs.getString(7).equals(ArriveLocationCB.getSelectedItem()) && rs.getString(2).equals(DepartDateCB.getSelectedItem()) && rs.getString(3).equals(DepartTimeCB.getSelectedItem())) {
                        BusDetailsDomain bd = bdControl.getRecord(rs.getString(8));
                        bs = new BusScheduleDomain(rs.getString(1), rs.getString(2), rs.getString(3), Integer.parseInt(rs.getString(4)), Double.parseDouble(rs.getString(5)), rs.getString(6), rs.getString(7), bd);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TicketTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (S1CB.isEnabled()) {
                String tempStrTranstID = "00001";
                String tempType = null;
                if (S1CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S1CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S2CB.isEnabled()) {
                String tempStrTranstID = "00002";
                String tempType = null;
                if (S2CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S2CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S3CB.isEnabled()) {
                String tempStrTranstID = "00003";
                String tempType = null;
                if (S3CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S3CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S4CB.isEnabled()) {
                String tempStrTranstID = "00004";
                String tempType = null;
                if (S4CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S4CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S5CB.isEnabled()) {
                String tempStrTranstID = "00005";
                String tempType = null;
                if (S5CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S5CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            if (S6CB.isEnabled()) {
                String tempStrTranstID = "00006";
                String tempType = null;
                if (S6CB.getSelectedItem().equals("Adult")) {
                    tempType = "00001";
                } else if (S6CB.getSelectedItem().equals("Children")) {
                    tempType = "00002";
                } else {
                    tempType = "00003";
                }
                CustTypeDomain ct = ctControl.getRecord(tempType);
                TransactionDetails utd = new TransactionDetails(tempStrTranstID, "Pending", bs, ct);
                tControl.addRecord(utd);
            }
            JOptionPane.showMessageDialog(rootPane, "Transaction Added.Please go to Payment Section to pay.");

            //Decrease the Available Seat
            int tempAS = Integer.parseInt(AvailableSeatTF.getText());
            int tempSN = SeatNeededCB.getSelectedIndex() + 1;
            int tempNewAS = tempAS - tempSN;
            bs.setAvailableSeat(tempNewAS);
            bsControl.updateRecord(bs);
            dispose();
            new Payment();
        }

    }//GEN-LAST:event_SubmitBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ArriveLocationCB;
    private javax.swing.JTextField AvailableSeatTF;
    private javax.swing.JButton BackBTN;
    private javax.swing.JTextField BusIDTF;
    private javax.swing.JTextField BusTypeTF;
    private javax.swing.JComboBox DepartDateCB;
    private javax.swing.JComboBox DepartLocationCB;
    private javax.swing.JComboBox DepartTimeCB;
    private javax.swing.JComboBox S1CB;
    private javax.swing.JComboBox S2CB;
    private javax.swing.JComboBox S3CB;
    private javax.swing.JComboBox S4CB;
    private javax.swing.JComboBox S5CB;
    private javax.swing.JComboBox S6CB;
    private javax.swing.JComboBox SeatNeededCB;
    private javax.swing.JButton SubmitBTN;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
