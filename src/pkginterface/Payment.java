/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkginterface;

import control.BusScheduleControl;
import control.CustTypeControl;
import control.MaintainStaffControl;
import control.PaymentDetailsControl;
import control.TransactionControl;
import domain.BusScheduleDomain;
import domain.CustTypeDomain;
import domain.PaymentDetails;
import domain.Staff;
import domain.TransactionDetails;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;

/**
 *
 * @author Student
 */
public class Payment extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    TransactionControl tControl = new TransactionControl();
    MaintainStaffControl smControl = new MaintainStaffControl();
    BusScheduleControl bsControl = new BusScheduleControl();
    CustTypeControl ctControl = new CustTypeControl();
    PaymentDetailsControl pControl = new PaymentDetailsControl();
    private static ResultSet forTandR; //T = ticker R = Receipt
    private static String paymentID;

    public Payment() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        
        forTandR = tControl.getRecordWithTranstStatus("Pending");
        //Get data from TransactionDatabase WHERE TranstStatus are pendind
        ResultSet trs = null; //trs = Transaction Result Set
        trs = tControl.getRecordWithTranstStatus("Pending");

        //Get BusSchedule data from BusScheduleDatabase with ScheduleID
        BusScheduleDomain bs = null;
        String tempBSID = null;
        try {
            while (trs.next()) {
                tempBSID = trs.getString(2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
        }
        bs = bsControl.getRecord(tempBSID);

        trs = tControl.getRecordWithTranstStatus("Pending");
        double total = 0;
        try {
            int row = 0;
            while (trs.next()) {
                CustTypeDomain ct = ctControl.getRecord(trs.getString(3));

                jTable1.setValueAt("From : " + bs.getDepartLocation() + " >>>>> To : " + bs.getArriveLocation() + " Type = " + ct.getCustType(), row, 0);
                jTable1.setValueAt(bs.getPrice() * ct.getDiscountRate(), row, 1);
                total += bs.getPrice() * ct.getDiscountRate();
                row++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException e) {

        }
        Date today = new Date();
        SimpleDateFormat df = new SimpleDateFormat("d-M-yyyy");
        SimpleDateFormat tf = new SimpleDateFormat("HHmm");

        DateTF.setText(df.format(today));
        TimeTF.setText(tf.format(today));
        TotalAmountTF.setText("" + total);

        PaymentDetails pd = pControl.getLastRowWithPaymentID();

        if (pd != null) {
            int tempTranstID = Integer.parseInt(pd.getPaymentId());
            tempTranstID += 1;
            String tempStrPaymentID = null;
            if (tempTranstID <= 9) {
                tempStrPaymentID = "0000" + tempTranstID;
            } else if (tempTranstID <= 99) {
                tempStrPaymentID = "000" + tempTranstID;
            } else if (tempTranstID <= 999) {
                tempStrPaymentID = "00" + tempTranstID;
            } else if (tempTranstID <= 9999) {
                tempStrPaymentID = "0" + tempTranstID;
            } else if (tempTranstID <= 99999) {
                tempStrPaymentID = "" + tempTranstID;
            }
            paymentID = tempStrPaymentID;
            PaymentIDTF.setText(tempStrPaymentID);
        } else {
            String tempStrPaymentID = "00001";
            paymentID = tempStrPaymentID;
            PaymentIDTF.setText(tempStrPaymentID);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        Title = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        PaymentIDTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        DateTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TimeTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TotalAmountTF = new javax.swing.JTextField();
        jrbCash = new javax.swing.JRadioButton();
        jrbCard = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        CancelBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Pristina", 3, 36)); // NOI18N
        Title.setText("Payment");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Payment ID:");

        PaymentIDTF.setForeground(new java.awt.Color(255, 255, 255));
        PaymentIDTF.setEnabled(false);
        PaymentIDTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentIDTFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Date:");

        DateTF.setEnabled(false);
        DateTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateTFActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Time:");

        TimeTF.setEnabled(false);
        TimeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeTFActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Total Amount:");

        TotalAmountTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TotalAmountTF.setEnabled(false);
        TotalAmountTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalAmountTFActionPerformed(evt);
            }
        });

        jrbCash.setText("Cash");
        jrbCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCashActionPerformed(evt);
            }
        });

        jrbCard.setText("Card");
        jrbCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCardActionPerformed(evt);
            }
        });

        jButton1.setText("Proceed");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CancelBTN.setText("Cancel");
        CancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jrbCash)
                                .addComponent(jLabel2)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addComponent(jLabel3)))
                            .addGap(30, 30, 30)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PaymentIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TotalAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TimeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jrbCard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 363, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(59, 59, 59)
                        .addComponent(CancelBTN)
                        .addGap(30, 30, 30))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PaymentIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateTF, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TimeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TotalAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbCash)
                    .addComponent(jrbCard)
                    .addComponent(jButton1)
                    .addComponent(CancelBTN))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Description", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static ResultSet getForTandR(){
    return forTandR;
}
public static String getPaymentID(){
    return paymentID;
}
    private void PaymentIDTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentIDTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentIDTFActionPerformed

    private void DateTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateTFActionPerformed

    private void TimeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeTFActionPerformed

    private void TotalAmountTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalAmountTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TotalAmountTFActionPerformed

    private void jrbCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCashActionPerformed
        // TODO add your handling code here:
        jrbCard.setSelected(false);
    }//GEN-LAST:event_jrbCashActionPerformed

    private void jrbCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCardActionPerformed
        // TODO add your handling code here:
        jrbCash.setSelected(false);
    }//GEN-LAST:event_jrbCardActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jrbCash.isSelected()) {
            String paymentID = PaymentIDTF.getText();
            String date = DateTF.getText();
            String time = TimeTF.getText();
            double total = Double.parseDouble(TotalAmountTF.getText());
            ResultSet trs = null;
            trs = tControl.getRecordWithTranstStatus("Pending");
            String loginUser = new StaffMaintenance().getLoginUser();
            String payType = "Cash";
            try {
                while (trs.next()) {
                    String tempStrPayCountID = null;
                    PaymentDetails pd = pControl.getLastRow();

                    if (pd != null) {
                        int tempPayCountID = Integer.parseInt(pd.getPaycountId());
                        tempPayCountID += 1;

                        if (tempPayCountID <= 9) {
                            tempStrPayCountID = "0000" + tempPayCountID;
                        } else if (tempPayCountID <= 99) {
                            tempStrPayCountID = "000" + tempPayCountID;
                        } else if (tempPayCountID <= 999) {
                            tempStrPayCountID = "00" + tempPayCountID;
                        } else if (tempPayCountID <= 9999) {
                            tempStrPayCountID = "0" + tempPayCountID;
                        } else if (tempPayCountID <= 99999) {
                            tempStrPayCountID = "" + tempPayCountID;
                        }
                    } else {
                        tempStrPayCountID = "00001";
                    }

                    TransactionDetails transID = tControl.getRecord(trs.getString(1));
                    Staff loginUser1 = smControl.getRecord(loginUser);

                    pd = new PaymentDetails(tempStrPayCountID, paymentID, date, time, payType, total, transID, loginUser1);
                    pControl.addRecord(pd);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException e) {
            }

            PayByCash s = new PayByCash();
            s.setVisible(true);
            dispose();
        } else if (jrbCard.isSelected()) {

            String paymentID = PaymentIDTF.getText();
            String date = DateTF.getText();
            String time = TimeTF.getText();
            double total = Double.parseDouble(TotalAmountTF.getText());
            ResultSet trs = null;
            trs = tControl.getRecordWithTranstStatus("Pending");
            PaymentDetails pd = pControl.getLastRow();
            String loginUser = new StaffMaintenance().getLoginUser();
            String payType = "Card";
            try {

                while (trs.next()) {
                    String tempStrPayCountID = null;

                    if (pd != null) {
                        int tempPayCountID = Integer.parseInt(pd.getPaycountId());
                        tempPayCountID += 1;

                        if (tempPayCountID <= 9) {
                            tempStrPayCountID = "0000" + tempPayCountID;
                        } else if (tempPayCountID <= 99) {
                            tempStrPayCountID = "000" + tempPayCountID;
                        } else if (tempPayCountID <= 999) {
                            tempStrPayCountID = "00" + tempPayCountID;
                        } else if (tempPayCountID <= 9999) {
                            tempStrPayCountID = "0" + tempPayCountID;
                        } else if (tempPayCountID <= 99999) {
                            tempStrPayCountID = "" + tempPayCountID;
                        }
                    } else {
                        tempStrPayCountID = "00001";
                    }
                    TransactionDetails transID = tControl.getRecord(trs.getString(1));
                    Staff loginUser1 = smControl.getRecord(loginUser);

                    pd = new PaymentDetails(tempStrPayCountID, paymentID, date, time, payType, total, transID, loginUser1);
                    pControl.addRecord(pd);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException e) {
            }

            PayByCard s = new PayByCard();
            s.setVisible(true);
            dispose();
        } else {
            JOptionPane.showMessageDialog(null, "You Should Select Either One Option to Proceed!", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void CancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBTNActionPerformed
        int confirmDialog = JOptionPane.showConfirmDialog(rootPane, "Confirm cancel transaction?", null, YES_NO_OPTION);
        if (confirmDialog == JOptionPane.YES_OPTION) {
            ResultSet cancelRS = tControl.getRecordWithTranstStatus("Pending");
            int count = 0;
            String tempScheduleID = null;
            try {
                while(cancelRS.next()){
                    tempScheduleID = cancelRS.getString(2);
                    count++;
                }
            } catch (SQLException ex) {
                Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
            }
            BusScheduleDomain BSDcancel = bsControl.getRecord(tempScheduleID); //BSD= Bus Schedule Domain
            int tempBSAS = BSDcancel.getAvailableSeat(); //BSAS = Bus Schedule Available Seat
            tempBSAS+=count;
            BSDcancel.setAvailableSeat(tempBSAS);
            bsControl.updateRecord(BSDcancel);
            
            TransactionDetails tdDelete = new TransactionDetails();
            tdDelete.setTranstStatus("Pending");
            tControl.deleteRecord(tdDelete);
            dispose();
            new MainMenu();
        }

    }//GEN-LAST:event_CancelBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBTN;
    private javax.swing.JTextField DateTF;
    private javax.swing.JTextField PaymentIDTF;
    private javax.swing.JTextField TimeTF;
    private javax.swing.JLabel Title;
    private javax.swing.JTextField TotalAmountTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JRadioButton jrbCard;
    private javax.swing.JRadioButton jrbCash;
    // End of variables declaration//GEN-END:variables
}
